{"ast":null,"code":"import { Pie } from \"vue-chartjs\";\nimport Chart from \"chart.js\";\nimport dashboardService from \"../services/dashboardService\";\nconst colorPalette = [\"rgba(99, 179, 237, 0.4)\",\n// Soft Blue\n\"rgba(255, 99, 132, 0.4)\",\n// Soft Pink\n\"rgba(255, 159, 64, 0.4)\",\n// Soft Orange\n\"rgba(153, 102, 255, 0.4)\",\n// Soft Purple\n\"rgba(75, 192, 192, 0.4)\",\n// Soft Cyan\n\"rgba(255, 205, 86, 0.4)\",\n// Soft Yellow\n\"rgba(54, 162, 235, 0.4)\",\n// Soft Sky Blue\n\"rgba(101, 143, 75, 0.4)\",\n// Soft Olive Green\n\"rgba(232, 67, 147, 0.4)\",\n// Soft Magenta\n\"rgba(162, 217, 206, 0.4)\" // Soft Teal\n];\nexport default {\n  components: {\n    GenderPieChart: {\n      extends: Pie,\n      props: [\"chartData\"],\n      mounted() {\n        this.renderChart(this.chartData, {\n          responsive: true,\n          maintainAspectRatio: false\n        });\n      }\n    },\n    EthnicityPieChart: {\n      extends: Pie,\n      props: [\"chartData\"],\n      mounted() {\n        this.renderChart(this.chartData, {\n          responsive: true,\n          maintainAspectRatio: false\n        });\n      }\n    }\n  },\n  name: \"DistributionDashboard\",\n  data() {\n    return {\n      counts: {},\n      avg: {},\n      students: [],\n      genderChartData: {\n        labels: [\"Male\", \"Female\"],\n        datasets: [{\n          backgroundColor: [colorPalette[0], colorPalette[1]],\n          data: []\n        }]\n      },\n      ethnicityChartData: {\n        labels: [],\n        datasets: [{\n          backgroundColor: colorPalette,\n          data: []\n        }]\n      }\n    };\n  },\n  methods: {\n    async fetchAllStudents() {\n      try {\n        const response = await dashboardService.getAllStudents();\n        this.students = response.data; // Assuming 'data' contains your students array\n      } catch (error) {\n        console.error(\"Error fetching students:\", error);\n      }\n    },\n    async fetchCounts() {\n      try {\n        const response = await dashboardService.getCounts();\n        this.counts = response.data;\n        console.log(\"Counts:\", this.counts);\n        this.genderChartData.datasets[0].data = [this.counts.countByGender[0].count, this.counts.countByGender[1].count];\n        this.ethnicityChartData.labels = this.counts.countByEthnicity.map(e => e.race_ethnicity);\n        this.ethnicityChartData.datasets[0].data = this.counts.countByEthnicity.map(e => e.count);\n        // this.ethnicityChartData.datasets[0].backgroundColor =\n        //   this.generateColors(this.counts.countByEthnicity.length);\n      } catch (error) {\n        console.error(\"Error fetching counts:\", error);\n      }\n    },\n    async fetchAvgScores() {\n      try {\n        const response = await dashboardService.getAvgScores();\n        this.avg = response.data;\n      } catch (error) {\n        console.error(\"Error fetching counts:\", error);\n      }\n    },\n    renderScatterPlot() {\n      console.log(\"Render scatter plot method is called.\");\n      // Prepare your scatter plot data\n      const data = {\n        datasets: [{\n          label: \"Scatter Plot\",\n          data: [\n          // Sample data points, replace with your actual data\n          {\n            x: 65,\n            y: 75\n          }, {\n            x: 67,\n            y: 70\n          }, {\n            x: 72,\n            y: 90\n          }\n          // Add more data points here\n          ],\n          backgroundColor: \"rgba(99, 179, 237, 0.4)\" // Point color\n        }]\n      };\n      // Chart.js configuration options\n      const options = {\n        responsive: true,\n        maintainAspectRatio: false,\n        scales: {\n          x: {\n            type: \"linear\",\n            position: \"bottom\",\n            title: {\n              display: true,\n              text: \"X-Axis Label\"\n            }\n          },\n          y: {\n            type: \"linear\",\n            position: \"left\",\n            title: {\n              display: true,\n              text: \"Y-Axis Label\"\n            }\n          }\n        }\n      };\n      // Create the scatter plot chart\n      const ctx = document.getElementById(\"scatter-chart\").getContext(\"2d\");\n      new Chart(ctx, {\n        type: \"scatter\",\n        data: data,\n        options: options\n      });\n    }\n    // other methods\n  },\n  mounted() {\n    this.fetchAllStudents();\n    this.fetchCounts();\n    this.fetchAvgScores();\n    this.renderScatterPlot();\n  }\n};","map":{"version":3,"names":["Pie","Chart","dashboardService","colorPalette","components","GenderPieChart","extends","props","mounted","renderChart","chartData","responsive","maintainAspectRatio","EthnicityPieChart","name","data","counts","avg","students","genderChartData","labels","datasets","backgroundColor","ethnicityChartData","methods","fetchAllStudents","response","getAllStudents","error","console","fetchCounts","getCounts","log","countByGender","count","countByEthnicity","map","e","race_ethnicity","fetchAvgScores","getAvgScores","renderScatterPlot","label","x","y","options","scales","type","position","title","display","text","ctx","document","getElementById","getContext"],"sources":["src/pages/Distribution.vue"],"sourcesContent":["<template>\r\n  <div id=\"distribution\">\r\n    <nav class=\"text-sm font-semibold mb-6\" aria-label=\"Breadcrumb\">\r\n      <ol class=\"list-none p-0 inline-flex\">\r\n        <li class=\"flex items-center text-blue-500\">\r\n          <a href=\"#\" class=\"text-gray-700\">Dashboard</a>\r\n          <svg\r\n            class=\"fill-current w-3 h-3 mx-3\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            viewBox=\"0 0 320 512\"\r\n          >\r\n            <path\r\n              d=\"M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z\"\r\n            />\r\n          </svg>\r\n        </li>\r\n        <li class=\"flex items-center\">\r\n          <a href=\"#\" class=\"text-gray-600\">Distribution</a>\r\n        </li>\r\n      </ol>\r\n    </nav>\r\n\r\n    <div class=\"flex flex-wrap -mx-3 mb-20\">\r\n      <div class=\"w-1/2 xl:w-1/4 px-3\">\r\n        <div\r\n          class=\"w-full bg-white border text-blue-400 rounded-lg flex items-center p-6 mb-6 xl:mb-0 cardComponant\"\r\n        >\r\n          <div>\r\n            <p>Total Students</p>\r\n\r\n            <p class=\"font-semibold text-3xl\">{{ counts.totalCount }}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"w-1/2 xl:w-1/4 px-3\">\r\n        <div\r\n          class=\"w-full bg-white border text-blue-400 rounded-lg flex items-center p-6 mb-6 xl:mb-0 cardComponant\"\r\n        >\r\n          <div>\r\n            <p>Completed Preperation Course</p>\r\n            <p class=\"font-semibold text-3xl\">\r\n              {{ counts.countByCourse }}\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <!-- Divider Line -->\r\n    <div class=\"w-full px-4 py-2\">\r\n      <hr class=\"divider-line\" />\r\n    </div>\r\n    <div class=\"flex flex-wrap -mx-3\">\r\n      <!-- Pie chart for Gender Distribution -->\r\n      <div class=\"w-full lg:w-1/3 px-4 py-2\">\r\n        <p class=\"text-xl font-semibold mb-4\">Gender Distribution</p>\r\n        <div class=\"bg-white p-6 rounded-lg shadow-lg\">\r\n          <gender-pie-chart :chart-data=\"genderChartData\" />\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Pie chart for Ethnicity Distribution -->\r\n      <div class=\"w-full lg:w-1/3 px-4 py-2\">\r\n        <p class=\"text-xl font-semibold mb-4\">Ethnicity Distribution</p>\r\n        <div class=\"bg-white p-6 rounded-lg shadow-lg\">\r\n          <ethnicity-pie-chart :chart-data=\"ethnicityChartData\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <!-- Divider Line -->\r\n    <div class=\"w-full px-4 py-2\">\r\n      <hr class=\"divider-line\" />\r\n    </div>\r\n    <!-- scatter plots -->\r\n    <div class=\"flex flex-wrap -mx-3\">\r\n      <!-- scatter plots -->\r\n      <div class=\" px-4 py-2\">\r\n        <canvas id=\"scatter-chart\" width=\"400\" height=\"200\"></canvas>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { Pie } from \"vue-chartjs\";\r\nimport Chart from \"chart.js\";\r\n\r\nimport dashboardService from \"../services/dashboardService\";\r\nconst colorPalette = [\r\n  \"rgba(99, 179, 237, 0.4)\", // Soft Blue\r\n  \"rgba(255, 99, 132, 0.4)\", // Soft Pink\r\n  \"rgba(255, 159, 64, 0.4)\", // Soft Orange\r\n  \"rgba(153, 102, 255, 0.4)\", // Soft Purple\r\n  \"rgba(75, 192, 192, 0.4)\", // Soft Cyan\r\n  \"rgba(255, 205, 86, 0.4)\", // Soft Yellow\r\n  \"rgba(54, 162, 235, 0.4)\", // Soft Sky Blue\r\n  \"rgba(101, 143, 75, 0.4)\", // Soft Olive Green\r\n  \"rgba(232, 67, 147, 0.4)\", // Soft Magenta\r\n  \"rgba(162, 217, 206, 0.4)\", // Soft Teal\r\n];\r\nexport default {\r\n  components: {\r\n    GenderPieChart: {\r\n      extends: Pie,\r\n      props: [\"chartData\"],\r\n      mounted() {\r\n        this.renderChart(this.chartData, {\r\n          responsive: true,\r\n          maintainAspectRatio: false,\r\n        });\r\n      },\r\n    },\r\n    EthnicityPieChart: {\r\n      extends: Pie,\r\n      props: [\"chartData\"],\r\n      mounted() {\r\n        this.renderChart(this.chartData, {\r\n          responsive: true,\r\n          maintainAspectRatio: false,\r\n        });\r\n      },\r\n    },\r\n  },\r\n  name: \"DistributionDashboard\",\r\n  data() {\r\n    return {\r\n      counts: {},\r\n      avg: {},\r\n      students: [],\r\n      genderChartData: {\r\n        labels: [\"Male\", \"Female\"],\r\n        datasets: [\r\n          {\r\n            backgroundColor: [colorPalette[0], colorPalette[1]],\r\n            data: [],\r\n          },\r\n        ],\r\n      },\r\n      ethnicityChartData: {\r\n        labels: [],\r\n        datasets: [\r\n          {\r\n            backgroundColor: colorPalette,\r\n            data: [],\r\n          },\r\n        ],\r\n      },\r\n    };\r\n  },\r\n  methods: {\r\n    async fetchAllStudents() {\r\n      try {\r\n        const response = await dashboardService.getAllStudents();\r\n        this.students = response.data; // Assuming 'data' contains your students array\r\n      } catch (error) {\r\n        console.error(\"Error fetching students:\", error);\r\n      }\r\n    },\r\n    async fetchCounts() {\r\n      try {\r\n        const response = await dashboardService.getCounts();\r\n        this.counts = response.data;\r\n        console.log(\"Counts:\", this.counts);\r\n        this.genderChartData.datasets[0].data = [\r\n          this.counts.countByGender[0].count,\r\n          this.counts.countByGender[1].count,\r\n        ];\r\n        this.ethnicityChartData.labels = this.counts.countByEthnicity.map(\r\n          (e) => e.race_ethnicity\r\n        );\r\n        this.ethnicityChartData.datasets[0].data =\r\n          this.counts.countByEthnicity.map((e) => e.count);\r\n        // this.ethnicityChartData.datasets[0].backgroundColor =\r\n        //   this.generateColors(this.counts.countByEthnicity.length);\r\n      } catch (error) {\r\n        console.error(\"Error fetching counts:\", error);\r\n      }\r\n    },\r\n    async fetchAvgScores() {\r\n      try {\r\n        const response = await dashboardService.getAvgScores();\r\n        this.avg = response.data;\r\n      } catch (error) {\r\n        console.error(\"Error fetching counts:\", error);\r\n      }\r\n    },\r\n    renderScatterPlot() {\r\n      console.log(\"Render scatter plot method is called.\");\r\n      // Prepare your scatter plot data\r\n      const data = {\r\n        datasets: [\r\n          {\r\n            label: \"Scatter Plot\",\r\n            data: [\r\n              // Sample data points, replace with your actual data\r\n              { x: 65, y: 75 },\r\n              { x: 67, y: 70 },\r\n              { x: 72, y: 90 },\r\n              // Add more data points here\r\n            ],\r\n            backgroundColor: \"rgba(99, 179, 237, 0.4)\", // Point color\r\n          },\r\n        ],\r\n      };\r\n      // Chart.js configuration options\r\n      const options = {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        scales: {\r\n          x: {\r\n            type: \"linear\",\r\n            position: \"bottom\",\r\n            title: {\r\n              display: true,\r\n              text: \"X-Axis Label\",\r\n            },\r\n          },\r\n          y: {\r\n            type: \"linear\",\r\n            position: \"left\",\r\n            title: {\r\n              display: true,\r\n              text: \"Y-Axis Label\",\r\n            },\r\n          },\r\n        },\r\n      };\r\n      // Create the scatter plot chart\r\n      const ctx = document.getElementById(\"scatter-chart\").getContext(\"2d\");\r\n      new Chart(ctx, {\r\n        type: \"scatter\",\r\n        data: data,\r\n        options: options,\r\n      });\r\n    },\r\n    // other methods\r\n  },\r\n  mounted() {\r\n    this.fetchAllStudents();\r\n    this.fetchCounts();\r\n    this.fetchAvgScores();\r\n    this.renderScatterPlot();\r\n  },\r\n};\r\n</script>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}